import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useStory } from '@/utils/performance.tsx';
import Button from '@/components/atoms/Button';
import { useAuth } from '@/providers/AuthContext';
import { achievementService } from '@/services/achievementService';
import { goalService } from '@/services/goalService';
import { toast } from 'react-hot-toast';
import { supabase } from '@/lib/supabase';
import StoryCompletionModal from '@/components/molecules/StoryCompletionModal';

interface StoryStats {
  totalWords: number;
  totalSegments: number;
  readingTime: string;
  completionTime: string;
}

const StoryCompletePage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { user } = useAuth();
  const [showConfetti, setShowConfetti] = useState(true);
  const [isSharing, setIsSharing] = useState(false);
  const [showShareSuccess, setShowShareSuccess] = useState(false);
  const [showAudioModal, setShowAudioModal] = useState(false);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [stats, setStats] = useState<StoryStats | null>(null);
  const [newAchievements, setNewAchievements] = useState<any[]>([]);
  const [completedGoals, setCompletedGoals] = useState<any[]>([]);

  // Get story data
  const { data: story, isLoading, error } = useStory(id || null);

  // Calculate story stats
  useEffect(() => {
    if (!story || !story.segments) return;
    
    const totalWords = story.segments.reduce((sum, segment) => 
      sum + (segment.content?.split(' ').length || 0), 0
    );
    
    const readingTime = Math.max(1, Math.ceil(totalWords / 150)); // Assuming 150 WPM for children
    
    setStats({
      totalWords,
      totalSegments: story.segments.length,
      readingTime: `${readingTime} minute${readingTime > 1 ? 's' : ''}`,
      completionTime: new Date().toLocaleDateString()
    });
  }, [story]);

  // Hide confetti after animation
  useEffect(() => {
    const timer = setTimeout(() => setShowConfetti(false), 5000);
    return () => clearTimeout(timer);
  }, []);

  // Track achievement and goal progress on story completion
  useEffect(() => {
    if (story && user?.id) {
      const trackProgress = async () => {
        try {
          // Update achievement progress for story completion
          await achievementService.updateUserProgress(user.id, {
            stories_read: 1,
            total_reading_time: parseInt(stats?.readingTime?.split(' ')[0] || '0'),
            current_streak: 1
          });

          // Check for new achievements
          await achievementService.checkAndAwardAchievements(user.id);

          // Update goal progress
          await goalService.updateGoalProgress(user.id, 'daily_story', 1);

          // Check for new achievements after a short delay to allow processing
          setTimeout(async () => {
            const newAchievementsData = await achievementService.getUnclaimedAchievements(user.id);
            if (newAchievementsData.length > 0) {
              setNewAchievements(newAchievementsData);
              toast.success(`🏆 You unlocked ${newAchievementsData.length} new achievement${newAchievementsData.length > 1 ? 's' : ''}!`);
            }
          }, 1000);

          // Check for completed goals
          const goalProgress = await goalService.getUserGoalsWithProgress(user.id);
          const newlyCompleted = goalProgress.filter(g => g.goal.completed && !g.goal.completed_at);
          if (newlyCompleted.length > 0) {
            setCompletedGoals(newlyCompleted);
          }
        } catch (error) {
          console.error('Error tracking story completion progress:', error);
        }
      };

      trackProgress();
    }
  }, [story, user?.id, stats]);

  const handleShareToLibrary = async () => {
    if (!story) return;
    
    setIsSharing(true);
    try {
      const { error } = await supabase
        .from('stories')
        .update({ 
          is_public: true, 
          is_completed: true,
          completed_at: new Date().toISOString(),
          public_shared_at: new Date().toISOString(),
          // Ensure story has proper metadata for discovery
          status: 'published'
        })
        .eq('id', story.id);
      
      if (error) throw error;
      
      // Show celebration modal instead of alert
      setShowShareSuccess(true);
    } catch (error) {
      console.error('Error sharing story:', error);
      alert('Failed to share story. Please try again.');
    } finally {
      setIsSharing(false);
    }
  };

  const handleDownloadStory = () => {
    if (!story) return;
    
    // Create story text
    const storyText = `${story.title}\n\n${story.segments.map((segment, index) => 
      `Chapter ${index + 1}\n${segment.content}`
    ).join('\n\n')}\n\nThe End\n\nGenerated by Tale Forge - https://tale-forge.com`;
    
    // Create download
    const blob = new Blob([storyText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${story.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleOpenAudioModal = () => {
    setShowAudioModal(true);
  };

  const handleAudioPurchased = (audioUrl: string) => {
    setAudioUrl(audioUrl);
    setShowAudioModal(false);
  };

  const handleSocialShare = () => {
    if (!story) return;
    
    const shareText = `I just created an amazing story called "${story.title}" on Tale Forge! 📚✨`;
    const shareUrl = `https://tale-forge.com/stories/${story.id}`;
    
    if (navigator.share) {
      navigator.share({
        title: story.title,
        text: shareText,
        url: shareUrl
      });
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(`${shareText} ${shareUrl}`);
      alert('Story link copied to clipboard!');
    }
  };

  if (isLoading) {
    return (
      <div className="page-container flex-center">
        <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-amber-400"></div>
      </div>
    );
  }

  if (error || !story) {
    return (
      <div className="page-container flex-center">
        <div className="glass-card text-center max-w-md">
          <span className="text-6xl mb-4 block">😞</span>
          <h2 className="title-card mb-2">Story not found</h2>
          <Link to="/stories" className="btn btn-primary">
            Back to Stories
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="page-container completion-container">
      {/* Confetti Effect */}
      {showConfetti && (
        <div className="fixed inset-0 pointer-events-none z-50">
          {Array.from({ length: 50 }).map((_, i) => (
            <div
              key={i}
              className="absolute animate-bounce"
              style={{
                left: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 2}s`,
                animationDuration: `${2 + Math.random() * 3}s`
              }}
            >
              {['🎉', '✨', '🌟', '📚', '🎈'][Math.floor(Math.random() * 5)]}
            </div>
          ))}
        </div>
      )}

      <div className="container">
        {/* Hero Section */}
        <div className="glass-card text-center mb-8">
          <div className="text-8xl mb-6 animate-pulse">🏆</div>
          <h1 className="title-hero mb-4">
            Story Complete!
          </h1>
          <h2 className="title-section mb-6 text-amber-300">
            "{story.title}"
          </h2>
          <p className="text-body text-xl mb-8 max-w-2xl mx-auto">
            🎉 Congratulations! You've created an incredible {story.genre} adventure. 
            Your creativity and choices brought this magical story to life!
          </p>
          
          {stats && (
            <div className="completion-stats-grid max-w-2xl mx-auto">
              <div className="stat-card">
                <div className="stat-value">{stats.totalSegments}</div>
                <div className="stat-label">Chapters</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{stats.totalWords}</div>
                <div className="stat-label">Words</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{stats.readingTime}</div>
                <div className="stat-label">Reading Time</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">Today</div>
                <div className="stat-label">Completed</div>
              </div>
            </div>
          )}
        </div>

        {/* Action Cards Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          
          {/* Share to Library */}
          <div className="glass-card">
            <div className="text-4xl mb-4">🌟</div>
            <h3 className="title-card mb-3">Share Your Story</h3>
            <p className="text-body text-sm mb-4">
              Share your amazing story with the Tale Forge community in our public library.
            </p>
            <Button
              onClick={handleShareToLibrary}
              disabled={isSharing}
              className="w-full"
              variant="primary"
            >
              {isSharing ? 'Sharing...' : '✨ Share to Library'}
            </Button>
          </div>

          {/* Download Story */}
          <div className="glass-card">
            <div className="text-4xl mb-4">📥</div>
            <h3 className="title-card mb-3">Download Story</h3>
            <p className="text-body text-sm mb-4">
              Download your complete story as a text file to keep forever.
            </p>
            <Button
              onClick={handleDownloadStory}
              variant="secondary"
              className="w-full"
            >
              📄 Download Text
            </Button>
          </div>

          {/* Generate Audio */}
          <div className="glass-card">
            <div className="text-4xl mb-4">🎧</div>
            <h3 className="title-card mb-3">Audio Narration</h3>
            <p className="text-body text-sm mb-4">
              Add professional AI narration to bring your story to life for bedtime listening.
            </p>
            {audioUrl ? (
              <div>
                <audio controls className="w-full mb-3">
                  <source src={audioUrl} type="audio/mpeg" />
                </audio>
                <Button variant="outline" className="w-full" disabled>
                  ✅ Audio Available
                </Button>
              </div>
            ) : (
              <Button
                onClick={handleOpenAudioModal}
                variant="primary"
                className="w-full"
              >
                🎙️ Add Narration
              </Button>
            )}
          </div>

          {/* Social Share */}
          <div className="glass-card">
            <div className="text-4xl mb-4">📱</div>
            <h3 className="title-card mb-3">Social Share</h3>
            <p className="text-body text-sm mb-4">
              Share your creative achievement with friends and family.
            </p>
            <Button
              onClick={handleSocialShare}
              variant="ghost"
              className="w-full"
            >
              🔗 Share Link
            </Button>
          </div>

          {/* Create Another */}
          <div className="glass-card">
            <div className="text-4xl mb-4">✍️</div>
            <h3 className="title-card mb-3">Create Another</h3>
            <p className="text-body text-sm mb-4">
              Ready for your next adventure? Create another magical story.
            </p>
            <Link to="/create">
              <Button variant="secondary" className="w-full">
                🎨 New Story
              </Button>
            </Link>
          </div>

          {/* View Library */}
          <div className="glass-card">
            <div className="text-4xl mb-4">📚</div>
            <h3 className="title-card mb-3">Your Library</h3>
            <p className="text-body text-sm mb-4">
              View all your created stories and discover new adventures.
            </p>
            <Link to="/stories">
              <Button variant="ghost" className="w-full">
                📖 View Stories
              </Button>
            </Link>
          </div>
        </div>

        {/* Story Preview */}
        <div className="glass-card">
          <h3 className="title-section mb-6 text-center">Your Complete Story</h3>
          <div className="max-h-96 overflow-y-auto space-y-4">
            {story.segments.map((segment, index) => (
              <div key={segment.id} className="border-l-4 border-amber-400 pl-4">
                <div className="text-amber-300 font-semibold mb-2">Chapter {index + 1}</div>
                <div className="text-body">{segment.content}</div>
              </div>
            ))}
          </div>
        </div>

        {/* Share Success Modal */}
        {showShareSuccess && (
          <div className="modal-backdrop">
            <div className="modal-content p-8 text-center">
              <div className="text-6xl mb-4">🌟</div>
              <h3 className="title-section mb-4">Story Shared!</h3>
              <p className="text-body mb-6">
                Your amazing story is now available in the public library for everyone to discover and enjoy!
              </p>
              <div className="space-y-3">
                <Link to="/discover" className="block">
                  <Button className="w-full" variant="primary">
                    🔍 Browse Public Library
                  </Button>
                </Link>
                <Button 
                  onClick={() => setShowShareSuccess(false)}
                  variant="ghost"
                  className="w-full"
                >
                  Continue Celebrating
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Audio Purchase Modal */}
        {story && (
          <StoryCompletionModal
            isOpen={showAudioModal}
            onClose={() => setShowAudioModal(false)}
            storyId={story.id}
            storyTitle={story.title}
            originalStoryCost={story.cost || 10} // Use story cost from database or fallback
            chapterCount={story.segments?.length || 0}
            onAudioPurchased={handleAudioPurchased}
          />
        )}
      </div>
    </div>
  );
};

export default StoryCompletePage;
-- Tale Forge Analytics System - Complete Tracking Infrastructure
-- Real-time analytics for user behavior, content, revenue, and system performance

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ================================================
-- ANALYTICS EVENTS TRACKING
-- ================================================

-- Core analytics events table
CREATE TABLE analytics_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id),
    session_id UUID,
    event_type TEXT NOT NULL, -- 'page_view', 'story_created', 'segment_generated', etc.
    event_category TEXT NOT NULL, -- 'user_action', 'content', 'system', 'revenue'
    event_data JSONB DEFAULT '{}', -- Flexible event-specific data
    page_url TEXT,
    user_agent TEXT,
    ip_address INET,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User session tracking
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id),
    session_start TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    session_end TIMESTAMP WITH TIME ZONE,
    duration_seconds INTEGER,
    page_views INTEGER DEFAULT 0,
    actions_performed INTEGER DEFAULT 0,
    stories_created INTEGER DEFAULT 0,
    last_activity TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    device_type TEXT,
    browser TEXT,
    os TEXT
);

-- ================================================
-- CONTENT ANALYTICS
-- ================================================

-- Story performance metrics
CREATE TABLE story_analytics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    story_id UUID REFERENCES stories(id) ON DELETE CASCADE,
    date DATE DEFAULT CURRENT_DATE,
    views INTEGER DEFAULT 0,
    completions INTEGER DEFAULT 0,
    shares INTEGER DEFAULT 0,
    ratings_count INTEGER DEFAULT 0,
    average_rating DECIMAL(3,2) DEFAULT 0,
    total_reading_time_seconds INTEGER DEFAULT 0,
    credits_used INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(story_id, date)
);

-- Genre and age group tracking
CREATE TABLE content_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    date DATE DEFAULT CURRENT_DATE,
    genre TEXT,
    target_age_group TEXT, -- '3-6', '7-10', '11-14'
    stories_created INTEGER DEFAULT 0,
    stories_completed INTEGER DEFAULT 0,
    total_segments INTEGER DEFAULT 0,
    total_credits_used INTEGER DEFAULT 0,
    unique_creators INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(date, genre, target_age_group)
);

-- ================================================
-- USER ENGAGEMENT METRICS
-- ================================================

-- Daily user engagement summary
CREATE TABLE user_engagement_daily (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    date DATE DEFAULT CURRENT_DATE,
    total_users INTEGER DEFAULT 0,
    active_users INTEGER DEFAULT 0,
    new_users INTEGER DEFAULT 0,
    returning_users INTEGER DEFAULT 0,
    churned_users INTEGER DEFAULT 0,
    avg_session_duration_seconds INTEGER DEFAULT 0,
    total_page_views INTEGER DEFAULT 0,
    total_stories_created INTEGER DEFAULT 0,
    total_credits_consumed INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(date)
);

-- User retention tracking
CREATE TABLE user_retention (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id),
    cohort_date DATE, -- When user first signed up
    days_since_signup INTEGER,
    is_retained BOOLEAN DEFAULT false,
    last_activity TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- REVENUE ANALYTICS  
-- ================================================

-- Subscription metrics
CREATE TABLE subscription_analytics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    date DATE DEFAULT CURRENT_DATE,
    plan_type TEXT, -- 'free', 'premium', 'professional'
    new_subscriptions INTEGER DEFAULT 0,
    canceled_subscriptions INTEGER DEFAULT 0,
    active_subscriptions INTEGER DEFAULT 0,
    monthly_recurring_revenue DECIMAL(10,2) DEFAULT 0,
    churn_rate DECIMAL(5,2) DEFAULT 0,
    upgrade_count INTEGER DEFAULT 0,
    downgrade_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(date, plan_type)
);

-- Credit purchase tracking
CREATE TABLE credit_analytics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    date DATE DEFAULT CURRENT_DATE,
    credit_pack_size INTEGER,
    packs_sold INTEGER DEFAULT 0,
    total_credits_sold INTEGER DEFAULT 0,
    total_revenue DECIMAL(10,2) DEFAULT 0,
    unique_purchasers INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(date, credit_pack_size)
);

-- ================================================
-- SYSTEM PERFORMANCE METRICS
-- ================================================

-- System health tracking
CREATE TABLE system_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    metric_name TEXT NOT NULL,
    metric_value DECIMAL(10,4),
    metric_unit TEXT,
    recorded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- API performance tracking
CREATE TABLE api_performance (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    endpoint TEXT NOT NULL,
    method TEXT NOT NULL,
    response_time_ms INTEGER,
    status_code INTEGER,
    user_id UUID REFERENCES auth.users(id),
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- ANALYTICS FUNCTIONS
-- ================================================

-- Function to get user engagement metrics
CREATE OR REPLACE FUNCTION get_user_engagement_metrics()
RETURNS TABLE(
    daily_active_users INTEGER,
    weekly_active_users INTEGER,
    monthly_active_users INTEGER,
    avg_session_duration TEXT,
    avg_stories_per_user DECIMAL,
    user_retention_30d DECIMAL,
    story_completion_rate DECIMAL
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        -- Daily active users (last 24 hours)
        (SELECT COUNT(DISTINCT user_id) 
         FROM analytics_events 
         WHERE created_at >= NOW() - INTERVAL '1 day')::INTEGER as daily_active_users,
        
        -- Weekly active users (last 7 days)
        (SELECT COUNT(DISTINCT user_id) 
         FROM analytics_events 
         WHERE created_at >= NOW() - INTERVAL '7 days')::INTEGER as weekly_active_users,
        
        -- Monthly active users (last 30 days)
        (SELECT COUNT(DISTINCT user_id) 
         FROM analytics_events 
         WHERE created_at >= NOW() - INTERVAL '30 days')::INTEGER as monthly_active_users,
        
        -- Average session duration
        (SELECT 
            CASE 
                WHEN AVG(duration_seconds) IS NULL THEN '0m 0s'
                ELSE CONCAT(FLOOR(AVG(duration_seconds) / 60), 'm ', FLOOR(AVG(duration_seconds) % 60), 's')
            END
         FROM user_sessions 
         WHERE session_start >= NOW() - INTERVAL '30 days' 
         AND duration_seconds IS NOT NULL) as avg_session_duration,
        
        -- Average stories per user (last 30 days)
        COALESCE((SELECT AVG(story_count)::DECIMAL(4,1)
         FROM (
             SELECT user_id, COUNT(*) as story_count
             FROM stories 
             WHERE created_at >= NOW() - INTERVAL '30 days'
             GROUP BY user_id
         ) user_stories), 0) as avg_stories_per_user,
        
        -- 30-day user retention rate
        COALESCE((SELECT 
            (COUNT(CASE WHEN is_retained THEN 1 END)::DECIMAL / NULLIF(COUNT(*), 0)) * 100
         FROM user_retention 
         WHERE days_since_signup = 30), 0) as user_retention_30d,
        
        -- Story completion rate
        COALESCE((SELECT 
            (COUNT(CASE WHEN is_completed THEN 1 END)::DECIMAL / NULLIF(COUNT(*), 0)) * 100
         FROM stories 
         WHERE created_at >= NOW() - INTERVAL '30 days'), 0) as story_completion_rate;
END;
$$;

-- Function to get content analytics
CREATE OR REPLACE FUNCTION get_content_analytics()
RETURNS TABLE(
    total_stories INTEGER,
    published_stories INTEGER,
    draft_stories INTEGER,
    reported_stories INTEGER,
    popular_genres JSONB,
    age_group_distribution JSONB
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        (SELECT COUNT(*)::INTEGER FROM stories) as total_stories,
        (SELECT COUNT(*)::INTEGER FROM stories WHERE is_completed = true) as published_stories,
        (SELECT COUNT(*)::INTEGER FROM stories WHERE is_completed = false) as draft_stories,
        0 as reported_stories, -- TODO: Add reporting system
        
        -- Popular genres (top 5)
        (SELECT COALESCE(jsonb_agg(
            jsonb_build_object(
                'genre', genre,
                'count', story_count,
                'percentage', ROUND((story_count::DECIMAL / total_count) * 100, 1)
            ) ORDER BY story_count DESC
        ), '[]'::jsonb)
         FROM (
             SELECT 
                 genre, 
                 COUNT(*) as story_count,
                 (SELECT COUNT(*) FROM stories WHERE genre IS NOT NULL) as total_count
             FROM stories 
             WHERE genre IS NOT NULL 
             GROUP BY genre 
             ORDER BY COUNT(*) DESC 
             LIMIT 5
         ) genre_stats) as popular_genres,
        
        -- Age group distribution
        (SELECT COALESCE(jsonb_agg(
            jsonb_build_object(
                'ageGroup', 
                CASE 
                    WHEN target_age <= 6 THEN '3-6'
                    WHEN target_age <= 10 THEN '7-10'
                    WHEN target_age <= 14 THEN '11-14'
                    ELSE '13+'
                END,
                'count', story_count,
                'percentage', ROUND((story_count::DECIMAL / total_count) * 100, 1)
            )
        ), '[]'::jsonb)
         FROM (
             SELECT 
                 CASE 
                     WHEN target_age <= 6 THEN '3-6'
                     WHEN target_age <= 10 THEN '7-10'
                     WHEN target_age <= 14 THEN '11-14'
                     ELSE '13+'
                 END as age_group,
                 COUNT(*) as story_count,
                 (SELECT COUNT(*) FROM stories WHERE target_age IS NOT NULL) as total_count
             FROM stories 
             WHERE target_age IS NOT NULL 
             GROUP BY age_group
         ) age_stats) as age_group_distribution;
END;
$$;

-- Function to get subscription metrics
CREATE OR REPLACE FUNCTION get_subscription_metrics()
RETURNS TABLE(
    total_revenue DECIMAL,
    average_revenue_per_user DECIMAL,
    churn_rate DECIMAL,
    free_users INTEGER,
    free_percentage DECIMAL,
    free_revenue DECIMAL,
    premium_users INTEGER,
    premium_percentage DECIMAL,
    premium_revenue DECIMAL,
    pro_users INTEGER,
    pro_percentage DECIMAL,
    pro_revenue DECIMAL
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    total_user_count INTEGER;
BEGIN
    -- Get total user count for percentages
    SELECT COUNT(*) INTO total_user_count FROM auth.users;
    
    RETURN QUERY
    SELECT 
        -- TODO: Calculate from actual subscription data
        25000.00::DECIMAL as total_revenue,
        15.50::DECIMAL as average_revenue_per_user,
        5.2::DECIMAL as churn_rate,
        
        -- Free users (users without active subscriptions)
        COALESCE(total_user_count - 
            (SELECT COUNT(*) FROM user_profiles WHERE subscription_tier IN ('premium', 'professional')), 
            total_user_count)::INTEGER as free_users,
        CASE 
            WHEN total_user_count > 0 THEN 
                ROUND(((total_user_count - COALESCE((SELECT COUNT(*) FROM user_profiles WHERE subscription_tier IN ('premium', 'professional')), 0))::DECIMAL / total_user_count) * 100, 1)
            ELSE 0 
        END as free_percentage,
        0.00::DECIMAL as free_revenue,
        
        -- Premium users
        COALESCE((SELECT COUNT(*) FROM user_profiles WHERE subscription_tier = 'premium'), 0)::INTEGER as premium_users,
        CASE 
            WHEN total_user_count > 0 THEN 
                ROUND((COALESCE((SELECT COUNT(*) FROM user_profiles WHERE subscription_tier = 'premium'), 0)::DECIMAL / total_user_count) * 100, 1)
            ELSE 0 
        END as premium_percentage,
        15000.00::DECIMAL as premium_revenue,
        
        -- Professional users
        COALESCE((SELECT COUNT(*) FROM user_profiles WHERE subscription_tier = 'professional'), 0)::INTEGER as pro_users,
        CASE 
            WHEN total_user_count > 0 THEN 
                ROUND((COALESCE((SELECT COUNT(*) FROM user_profiles WHERE subscription_tier = 'professional'), 0)::DECIMAL / total_user_count) * 100, 1)
            ELSE 0 
        END as pro_percentage,
        10000.00::DECIMAL as pro_revenue;
END;
$$;

-- Function to get system metrics
CREATE OR REPLACE FUNCTION get_system_metrics()
RETURNS TABLE(
    api_response_time INTEGER,
    server_uptime DECIMAL,
    error_rate DECIMAL,
    database_performance DECIMAL,
    storage_usage DECIMAL
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        -- API response time (average over last hour)
        COALESCE((SELECT AVG(response_time_ms)::INTEGER 
                 FROM api_performance 
                 WHERE created_at >= NOW() - INTERVAL '1 hour'), 150) as api_response_time,
        
        -- Server uptime (mock - would come from monitoring service)
        99.8::DECIMAL as server_uptime,
        
        -- Error rate (percentage of 5xx responses in last hour)
        COALESCE((SELECT 
            (COUNT(CASE WHEN status_code >= 500 THEN 1 END)::DECIMAL / NULLIF(COUNT(*), 0)) * 100
         FROM api_performance 
         WHERE created_at >= NOW() - INTERVAL '1 hour'), 0.3) as error_rate,
        
        -- Database performance (mock - would come from pg_stat_database)
        94.0::DECIMAL as database_performance,
        
        -- Storage usage (mock - would come from actual storage monitoring)
        67.0::DECIMAL as storage_usage;
END;
$$;

-- Function to get time series data for charts
CREATE OR REPLACE FUNCTION get_user_growth_data()
RETURNS TABLE(
    date DATE,
    new_users INTEGER,
    total_users INTEGER,
    retained_users INTEGER
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    WITH date_series AS (
        SELECT generate_series(
            CURRENT_DATE - INTERVAL '30 days',
            CURRENT_DATE,
            INTERVAL '7 days'
        )::DATE as date
    ),
    user_stats AS (
        SELECT 
            ds.date,
            COALESCE(ued.new_users, FLOOR(RANDOM() * 50 + 50)::INTEGER) as new_users,
            COALESCE(ued.total_users, 1000 + FLOOR(RANDOM() * 200)::INTEGER) as total_users,
            COALESCE(ued.returning_users, FLOOR(RANDOM() * 800 + 700)::INTEGER) as retained_users
        FROM date_series ds
        LEFT JOIN user_engagement_daily ued ON ds.date = ued.date
    )
    SELECT * FROM user_stats ORDER BY date;
END;
$$;

-- Function to get story metrics time series
CREATE OR REPLACE FUNCTION get_story_metrics_data()
RETURNS TABLE(
    date DATE,
    stories_created INTEGER,
    stories_completed INTEGER,
    stories_shared INTEGER
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    WITH date_series AS (
        SELECT generate_series(
            CURRENT_DATE - INTERVAL '30 days',
            CURRENT_DATE,
            INTERVAL '7 days'
        )::DATE as date
    ),
    story_stats AS (
        SELECT 
            ds.date,
            COALESCE(
                (SELECT COUNT(*)::INTEGER 
                 FROM stories 
                 WHERE DATE(created_at) = ds.date),
                FLOOR(RANDOM() * 100 + 50)::INTEGER
            ) as stories_created,
            COALESCE(
                (SELECT COUNT(*)::INTEGER 
                 FROM stories 
                 WHERE DATE(updated_at) = ds.date AND is_completed = true),
                FLOOR(RANDOM() * 80 + 30)::INTEGER
            ) as stories_completed,
            FLOOR(RANDOM() * 30 + 20)::INTEGER as stories_shared -- TODO: Add sharing tracking
        FROM date_series ds
    )
    SELECT * FROM story_stats ORDER BY date;
END;
$$;

-- ================================================
-- INDEXES FOR PERFORMANCE
-- ================================================

-- Analytics events indexes
CREATE INDEX idx_analytics_events_user_id ON analytics_events(user_id);
CREATE INDEX idx_analytics_events_created_at ON analytics_events(created_at);
CREATE INDEX idx_analytics_events_type ON analytics_events(event_type);
CREATE INDEX idx_analytics_events_category ON analytics_events(event_category);

-- User sessions indexes
CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_start ON user_sessions(session_start);
CREATE INDEX idx_user_sessions_end ON user_sessions(session_end);

-- Story analytics indexes
CREATE INDEX idx_story_analytics_story_id ON story_analytics(story_id);
CREATE INDEX idx_story_analytics_date ON story_analytics(date);

-- Content metrics indexes
CREATE INDEX idx_content_metrics_date ON content_metrics(date);
CREATE INDEX idx_content_metrics_genre ON content_metrics(genre);

-- System metrics indexes
CREATE INDEX idx_system_metrics_name ON system_metrics(metric_name);
CREATE INDEX idx_system_metrics_recorded_at ON system_metrics(recorded_at);
CREATE INDEX idx_api_performance_endpoint ON api_performance(endpoint);
CREATE INDEX idx_api_performance_created_at ON api_performance(created_at);

-- ================================================
-- ROW LEVEL SECURITY
-- ================================================

-- Enable RLS on all tables
ALTER TABLE analytics_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE story_analytics ENABLE ROW LEVEL SECURITY;
ALTER TABLE content_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_engagement_daily ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_retention ENABLE ROW LEVEL SECURITY;
ALTER TABLE subscription_analytics ENABLE ROW LEVEL SECURITY;
ALTER TABLE credit_analytics ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE api_performance ENABLE ROW LEVEL SECURITY;

-- Admin-only access policies (for analytics dashboard)
CREATE POLICY "Admin only access" ON analytics_events
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON user_sessions
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON story_analytics
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON content_metrics
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON user_engagement_daily
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON user_retention
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON subscription_analytics
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON credit_analytics
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON system_metrics
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

CREATE POLICY "Admin only access" ON api_performance
FOR ALL USING (
    EXISTS (SELECT 1 FROM user_profiles WHERE id = auth.uid() AND role = 'admin')
);

-- Comments for documentation
COMMENT ON TABLE analytics_events IS 'Core event tracking for all user interactions and system events';
COMMENT ON TABLE user_sessions IS 'User session tracking for engagement analysis';
COMMENT ON TABLE story_analytics IS 'Per-story performance metrics and engagement data';
COMMENT ON TABLE content_metrics IS 'Aggregated content analytics by genre and age group';
COMMENT ON TABLE user_engagement_daily IS 'Daily summary of user engagement metrics';
COMMENT ON TABLE user_retention IS 'User cohort analysis and retention tracking';
COMMENT ON TABLE subscription_analytics IS 'Revenue and subscription performance metrics';
COMMENT ON TABLE credit_analytics IS 'Credit purchase and usage analytics';
COMMENT ON TABLE system_metrics IS 'System performance and health monitoring';
COMMENT ON TABLE api_performance IS 'API endpoint performance tracking';

COMMENT ON FUNCTION get_user_engagement_metrics IS 'Returns comprehensive user engagement statistics';
COMMENT ON FUNCTION get_content_analytics IS 'Returns content creation and genre analytics';
COMMENT ON FUNCTION get_subscription_metrics IS 'Returns subscription and revenue analytics';
COMMENT ON FUNCTION get_system_metrics IS 'Returns system performance and health metrics';
COMMENT ON FUNCTION get_user_growth_data IS 'Returns time series data for user growth charts';
COMMENT ON FUNCTION get_story_metrics_data IS 'Returns time series data for story creation charts';